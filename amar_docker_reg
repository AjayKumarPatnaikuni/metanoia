CloudBees Docker Custom Build Environment Plugin


CloudBees Docker Build and Publish plugin

username/project_repo
${BUILD_NUMBER}
http://192.168.3.145:9000
http://registry.metanoiasolutions.net/



jenkins:1.651.1-alpine
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@22

https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-docker-registry-on-ubuntu-14-04

mkdir ~/docker-registry && cd $_
mkdir data 
mkdir nginx

nano docker-compose.yml
---
nginx:
  image: "nginx:1.9"
  ports:
    - 5043:443
  links:
    - registry:registry		//service:hostname
  volumes:
    - ./nginx/:/etc/nginx/conf.d:ro

registry:
  image: registry:2
  ports:
    - 127.0.0.1:5000:5000
  environment:
    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
  volumes:
    - ./data:/data

***************************************************************
nano ~/docker-registry/nginx/registry.conf

upstream docker-registry {
  server registry:5000;
}

server {
  listen 443;
  server_name myregistrydomain.com;

  # SSL
  # ssl on;
  # ssl_certificate /etc/nginx/conf.d/domain.crt;
  # ssl_certificate_key /etc/nginx/conf.d/domain.key;

  # disable any limits to avoid HTTP 413 for large image uploads
  client_max_body_size 0;

  # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
  chunked_transfer_encoding on;

  location /v2/ {
    # Do not allow connections from docker 1.5 and earlier
    # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
    if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
      return 404;
    }

    # To add basic authentication to v2 use auth_basic setting plus add_header
    # auth_basic "registry.localhost";
    # auth_basic_user_file /etc/nginx/conf.d/registry.password;
    # add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;

    proxy_pass                          http://docker-registry;
    proxy_set_header  Host              $http_host;   # required for docker client's sake
    proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_read_timeout                  900;
  }
}

***********************************************************************************
	
cd ~/docker-registry/nginx
htpasswd -c registry.password USERNAME // -c to create

nano ~/docker-registry/nginx/registry.conf

# uncomment
auth_basic "registry.localhost";
auth_basic_user_file /etc/nginx/conf.d/registry.password;
add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;

# server_name myregistrydomain.com; // if you have domain setit up here

#uncomment
ssl on;
ssl_certificate /etc/nginx/conf.d/domain.crt;
ssl_certificate_key /etc/nginx/conf.d/domain.key;

----------------------------------------------------------------------------------
cd ~/docker-registry
docker-compose up

curl http://localhost:5000/v2/
curl http://localhost:5043/v2/
curl http://USERNAME:PASSWORD@localhost:5043/v2/ // localhost (or) yourdomain [-k ]



-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

version: '3'
services:
 db:
   build: db
   volumes:
    - db_data:/var/lib/mysql
   container_name: sqldb
   environment:
     MYSQL_DATABASE: "solar"
     MYSQL_USER: "solar"
     MYSQL_PASSWORD: "solar"
     MYSQL_ROOT_PASSWORD: "root"
   ports:
    - "3306:3306"
   networks:
    dbn:
     ipv4_address: 10.5.0.11
 app:
   build: .
   container_name: appsolar
   ports:
    - "8080:8080"
    - "28080:28080"
   networks:
    dbn:
     ipv4_address: 10.5.0.25
   depends_on:
    - db
volumes:
  db_data:

networks:
 dbn:
  driver: bridge
  ipam:
   config:
    - subnet: 10.5.0.0/16 




FROM java:8
VOLUME /tmp
RUN apt-get update -y && apt-get install -y supervisor
RUN groupadd -r app && useradd -r -gapp app
RUN mkdir -m 0755 -p /usr/local/app/bin
RUN mkdir -m 0755 -p /usr/local/app/config
RUN mkdir -m 0755 -p /usr/local/app/logs/

COPY solar-discovery.jar /usr/local/app/bin
COPY solar-config.jar /usr/local/app/bin
COPY solar-core.jar /usr/local/app/bin
COPY solar-dashboard.jar /usr/local/app/bin
COPY solar-maps.jar /usr/local/app/bin
COPY solar-calendar.jar /usr/local/app/bin
COPY solar-reports.jar /usr/local/app/bin

RUN mkdir -p /home/reports && chmod 0755 /home/reports

COPY app-supervisor.conf /etc/supervisor/conf.d


EXPOSE 28080

CMD ["/usr/bin/supervisord", "-n"]





FROM mysql:5.7

# Environment variables
ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=solar
ENV MYSQL_USER=solar
ENV MYSQL_PASSWORD=solar
RUN echo "lower_case_table_names=1" >> /etc/mysql/mysql.conf.d/mysqld.cnf
COPY Solar.sql /docker-entrypoint-initdb.d/



Solar.sql /docker-entrypoint-initdb.d/
docker-compose up
docker exec database.dev bash /tmp/import.sh



version: '3'
services:
 database:
   image: mysql
   command: mysqld --user=root --verbose
   volumes:
    - ./Solar.sql:/tmp/Solar.sql
    - ./import.sh:/tmp/import.sh
   environment:
     MYSQL_DATABASE: "solar"
     MYSQL_USER: "solar"
     MYSQL_PASSWORD: "solar"
     MYSQL_ROOT_PASSWORD: "root"
     MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
   ports:
    - "3306:3306"
   deploy:
    resources:
     limits:
      cpus: '0.50'
      memory: 2G
     reservations:
      cpus: '0.25'
      memory: 1G
 app1:
   build: .
   ports:
    - "8080:8080"
   depends_on:
    - database
